function [h,l,t] = heavyFrameOptimisation(maxN,maxS,maxM)
     
    tensileYieldStressFrame = 375*1e6;
    shearYieldStressFrame = 200*1e6;

    lb = [ 0.02, 0.01,0.001,0.002 ];
    ub = [ 0.06, 0.04, 0.004, 0.004 ];
    
    hRange = lb(1):0.002:ub(1)
    lRange = lb(2):0.002:ub(2);
    tRange = lb(3):0.0002:ub(3);


    success = [];
    for i = 1:length(hRange)
        currentH = hRange(i);

        for j = 1:length(lRange)
            currentL = lRange(j);

            for k = 1:length(tRange)
                currentT = tRange(k);
 
                    [currentFrameArea,currentFrameIxx] = IFrameProps(currentT, currentH, currentL); 

                    if maxN/currentFrameArea <= tensileYieldStressFrame
                        directStressCompliant = true;
                    else
                        directStressCompliant = false;
                    end
                         %apparently the web takes most the shear flow
                    if maxS/currentH*currentT <= shearYieldStressFrame
                        shearStressCompliant = true;
                    else
                        shearStressCompliant = false;
                    end
                    
                    if (maxM*currentH/2)/currentFrameIxx <= tensileYieldStressFrame
                        bendingStressCompliant = true;
                    else
                        bendingStressCompliant = false;
                    end

                    structurallyCompliant = all([directStressCompliant, shearStressCompliant, bendingStressCompliant]);
           
                    if structurallyCompliant
                            success = [success; i, j, k, currentFrameArea];
    
                    end
            
            end 
        end 
        disp(['Completed index: ' num2str(i)]);
    end

     
    successfulH   = hRange(success(:,1));
    successfulL = lRange(success(:,2));
    successfulT = tRange(success(:,3));
    successfulArea = (success(:,4));

    objectiveValue = successfulArea;
    
    figure;
    scatter3(successfulH, successfulL, successfulT, 50, objectiveValue, 'filled');
    xlabel('H');
    ylabel('L');
    zlabel('T');
    colorbar;
    title('Frame Area Optimisation');

    [minValue, idxMin] = min(objectiveValue);
    hold on;
    plot3(successfulSkinThickness(idxMin), successfulStringerThickness(idxMin), successfulH(idxMin),...
      'rp', 'MarkerSize', 12, 'MarkerFaceColor', 'r');

    legend('Design Points', 'Minimum Objective');

    skinThickness = successfulSkinThickness(idxMin);
    stringerThickness = successfulStringerThickness(idxMin);
    h = successfulH(idxMin);
    t_s = successfulStringerThickness(idxMin);
    L = successfulL(idxMin);
    stringerSpacing = successfulStringerSpacing(idxMin);





    
end